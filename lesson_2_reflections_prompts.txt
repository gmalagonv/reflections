**What happens when you initialize a repository? Why do you need to do it?
git starts tracking any file that is in the directory. We need to do it to tell git
that it has to start tracking them.

**How is the staging area different from the working directory and the repository?
 What value do you think it offers?
 staging area is an intermediate between the working directory and a repository.
 it offers more control.

 **How can you use the staging area to make sure you have one commit per logical change?
 objects in staging area can be compared with the working directory (git diff) and with
 the last commit (git diff --staged). By this, we will only commit once we're sure
 that it is a logical change.

**What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches can be helpful when:
-experimental and probably risky changes in the code are tested.
-new versions of the code while I want to keep the original version. This new
version will evolve but itself.

**How do the diagrams help you visualize the branch structure?
 given that as branching commits makes all the repository quite complex, the
 diagrams display a graphical representation of the repository helping to see
 where the heads are, and where we are in relation to them.

**What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?
The result is to have a final commit where the changes(in relation to the last
common parent) of both branches show up. We represent it in the way that we do
for the origin of each commit to be clear.

**What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
the pros of the automatic one is the time, it's easy and quick, Git is able to
realize when there is a conflict and only then prompt the manual.
